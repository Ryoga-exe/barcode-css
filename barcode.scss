// barcode.scss

// utils
@function zpad($n) {
  @return if($n < 10, "0#{$n}", $n);
}

@function bar($bin) {
  $val: calc(255 * (1 - $bin));
  @return rgb(calc($val), calc($val), calc($val));
}

// logical operations
@function NOT($x) {
  @return calc(1 - $x);
}

@function AND($x, $y) {
  @return calc($x * $y);
}

@function AND3($x, $y, $z) {
  @return calc($x * $y * $z);
}

@function AND4($x, $y, $z, $w) {
  @return calc($x * $y * $z * $w);
}

@function OR($x, $y) {
  // x + y
  // = !(!(x + y))
  // = !(!x * !y)
  @return calc(1 - (1 - $x) * (1 - $y));
}

@function OR3($x, $y, $z) {
  @return calc(1 - (1 - $x) * (1 - $y) * (1 - $z));
}

@function OR4($x, $y, $z, $w) {
  @return calc(1 - (1 - $x) * (1 - $y) * (1 - $z) * (1 - $w));
}
// ---------

:root {
  --bar-width: 3px;
  --bar-height: 100px;
  --guardbar-height: 110px;

  @for $i from 0 through 11 {
    --d#{zpad($i)}: 0;
  }
}

#barcode {
  display: flex;
  > div {
    display: flex;
  }
  .datachar {
    display: flex;
  }

  .bar {
    width: var(--bar-width);
    height: var(--bar-height);
  }

  .left-margin,
  .right-margin {
    .bar {
      background: bar(0);
    }
  }

  .left-guardbar,
  .right-guardbar {
    .bar:nth-child(2n - 1) {
      background: bar(1);
      height: var(--guardbar-height);
    }
  }

  .center-bar {
    .bar.bar:nth-child(2n) {
      background: bar(1);
      height: var(--guardbar-height);
    }
  }

  .right-databar {
    // process d07 ... d11 and d12 (check-digit)
    @for $i from 0 through 5 {
      .datachar:nth-child(#{$i + 1}) {
        $t: "--d#{zpad(7 + $i)}";

        // to binary
        @for $j from 0 through 3 {
          @if $j == 0 {
            --tmp#{$j}: var(#{$t});
          } @else {
            --tmp#{$j}: calc((var(--tmp#{$j - 1}) - var(--t#{$j - 1})) / 2);
          }
          --t#{$j}: mod(var(--tmp#{$j}), 2);
        }

        $t0: var(--t0);
        $t1: var(--t1);
        $t2: var(--t2);
        $t3: var(--t3);

        // encode $x to data character
        // 0: 1110010
        // 1: 1100110
        // 2: 1101100
        // 3: 1000010
        // 4: 1011100
        // 5: 1001110
        // 6: 1010000
        // 7: 1000100
        // 8: 1001000
        // 9: 1110100

        // always 1
        .bar:nth-child(1) {
          background: bar(1);
        }

        //   !t0 * !t1 * !t2 * !t3
        // +  t0 * !t1 * !t2 * !t3
        // + !t0 *  t1 * !t2 * !t3
        // +  t0 * !t1 * !t2 *  t3
        // = t0*!t1*!t2 + !t0*!t2*!t3
        .bar:nth-child(2) {
          background: bar(
            OR(
              AND3($t0, NOT($t1), NOT($t2)),
              AND3(NOT($t0), NOT($t2), NOT($t3))
            )
          );
        }

        //   !t0 * !t1 * !t2 * !t3
        // + !t0 * !t1 *  t2 * !t3
        // + !t0 *  t1 *  t2 * !t3
        // +  t0 * !t1 * !t2 *  t3
        // = !t3*!t2*!t1*!t0 + !t3*t2*!t0 + t3*!t2*!t1*t0
        .bar:nth-child(3) {
          background: bar(
            OR3(
              AND4(NOT($t3), NOT($t2), NOT($t1), NOT($t0)),
              AND3(NOT($t3), $t2, NOT($t0)),
              AND4($t3, NOT($t2), NOT($t1), $t0)
            )
          );
        }

        //   !t0 *  t1 * !t2 *!t3
        // + !t0 * !t1 *  t2 *!t3
        // +  t0 * !t1 *  t2 *!t3
        // + !t0 * !t1 * !t2 * t3
        // = !t3*!t2*t1*!t0 + !t3*t2*!t1 + t3*!t2*!t1*!t0
        .bar:nth-child(4) {
          background: bar(
            OR3(
              AND4(NOT($t3), NOT($t2), $t1, NOT($t0)),
              AND3(NOT($t3), $t2, NOT($t1)),
              AND4($t3, NOT($t2), NOT($t1), NOT($t0))
            )
          );
        }

        //    t0 * !t1 * !t2 * !t3
        // + !t0 *  t1 * !t2 * !t3
        // + !t0 * !t1 *  t2 * !t3
        // +  t0 * !t1 *  t2 * !t3
        // +  t0 *  t1 *  t2 * !t3
        // +  t0 * !t1 * !t2 *  t3
        // = t0*t2*!t3 + t0*!t1*!t2 + t2*!t1*!t3 + t1*!t0*!t2*!t3
        .bar:nth-child(5) {
          background: bar(
            OR4(
              AND3($t0, $t2, NOT($t3)),
              AND3($t0, NOT($t1), NOT($t2)),
              AND3(NOT($t1), $t2, NOT($t3)),
              AND4($t1, NOT($t0), NOT($t2), NOT($t3))
            )
          );
        }

        //   !t0 * !t1 * !t2 * !t3
        // +  t0 * !t1 * !t2 * !t3
        // +  t0 *  t1 * !t2 * !t3
        // +  t0 * !t1 *  t2 * !t3
        // = t0*!t1*!t3 + t0*!t2*!t3 + !t1*!t2*!t3
        .bar:nth-child(6) {
          background: bar(
            OR3(
              AND3($t0, NOT($t1), NOT($t3)),
              AND3($t0, NOT($t2), NOT($t3)),
              AND3(NOT($t1), NOT($t2), NOT($t3))
            )
          );
        }

        // always 0
        .bar:nth-child(7) {
          background: bar(0);
        }
      }
    }
  }
}

// input
@for $digit from 0 through 11 {
  $cls: "digit#{zpad($digit)}";

  @for $val from 0 through 9 {
    :root:has(.#{$cls} input[value="#{$val}"]:checked) {
      --d#{zpad($digit)}: #{$val};
    }
  }
}

// calculate check-digit
:root {
  --sum-even: calc(
    var(--d00) + var(--d02) + var(--d04) + var(--d06) + var(--d08) + var(--d10)
  );
  --sum-odd: calc(
    var(--d01) + var(--d03) + var(--d05) + var(--d07) + var(--d09) + var(--d11)
  );
  --check-digit: mod(
    calc(10 - mod(calc(var(--sum-odd) * 3 + var(--sum-even)), 10)),
    10
  );
  --d12: var(--check-digit);
}

#sum-even-digits::after {
  counter-reset: val var(--sum-even);
  content: counter(val);
}

#sum-odd-digits::after {
  counter-reset: val var(--sum-odd);
  content: counter(val);
}

#check-digit::after {
  counter-reset: val var(--check-digit);
  content: counter(val);
}
