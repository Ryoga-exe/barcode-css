// barcode.scss

// utils
@function zpad($n) {
  @return if($n < 10, "0#{$n}", $n);
}

@function bar($bin) {
  $val: calc(255 * (1 - $bin));
  @return rgb(calc($val), calc($val), calc($val));
}

// logical operations
@function NOT($x) {
  @return calc(1 - $x);
}

@function AND($x, $y) {
  @return calc($x * $y);
}

@function AND3($x, $y, $z) {
  @return calc($x * $y * $z);
}

@function AND4($x, $y, $z, $w) {
  @return calc($x * $y * $z * $w);
}

@function OR($x, $y) {
  // x + y
  // = !(!(x + y))
  // = !(!x * !y)
  @return calc(1 - (1 - $x) * (1 - $y));
}

@function OR3($x, $y, $z) {
  @return calc(1 - (1 - $x) * (1 - $y) * (1 - $z));
}

@function OR4($x, $y, $z, $w) {
  @return calc(1 - (1 - $x) * (1 - $y) * (1 - $z) * (1 - $w));
}

// out = sel ? in1 : in0
@function mux($in0, $in1, $sel) {
  @return OR(AND(NOT($sel), $in0), AND($sel, $in1));
}
// ---------

:root {
  --bar-width: 3px;
  --bar-height: 130px;
  --guardbar-height: 145px;

  @for $i from 0 through 11 {
    --d#{zpad($i)}: 0;
  }
}

#barcode {
  display: flex;
  margin-bottom: 50px;
  > div {
    display: flex;
  }
  .datachar {
    display: flex;
  }

  .bar {
    width: var(--bar-width);
    height: var(--bar-height);
  }

  .left-margin,
  .right-margin {
    .bar {
      background: bar(0);
    }
  }

  .left-guardbar,
  .right-guardbar {
    .bar:nth-child(2n - 1) {
      background: bar(1);
      height: var(--guardbar-height);
    }
  }

  .center-bar {
    .bar.bar:nth-child(2n) {
      background: bar(1);
      height: var(--guardbar-height);
    }
  }

  .left-databar {
    // process prefix-character (d00) and generate parity pattern

    // to binary
    @for $j from 0 through 3 {
      @if $j == 0 {
        --tmp-s#{$j}: var(--d00);
      } @else {
        --tmp-s#{$j}: calc((var(--tmp-s#{$j - 1}) - var(--s#{$j - 1})) / 2);
      }
      --s#{$j}: mod(var(--tmp-s#{$j}), 2);
    }

    $s0: var(--s0);
    $s1: var(--s1);
    $s2: var(--s2);
    $s3: var(--s3);

    // 0: 000000
    // 1: 001011
    // 2: 001101
    // 3: 001110
    // 4: 010011
    // 5: 011001
    // 6: 011100
    // 7: 010101
    // 8: 010110
    // 9: 011010

    // always 0
    $p1: 0;

    //   !s3 *  s2 * !s1 * !s0
    // + !s3 *  s2 * !s1 *  s0
    // + !s3 *  s2 *  s1 * !s0
    // + !s3 *  s2 *  s1 *  s0
    // +  s3 * !s2 * !s1 * !s0
    // +  s3 * !s2 * !s1 *  s0
    // = s2 + s3
    $p2: OR($s2, $s3);

    //   !s3 * !s2 * !s1 *  s0
    // + !s3 * !s2 *  s1 * !s0
    // + !s3 * !s2 *  s1 *  s0
    // + !s3 *  s2 * !s1 *  s0
    // + !s3 *  s2 *  s1 * !s0
    // +  s3 * !s2 * !s1 *  s0
    // = s0*!s1*!s2 + s0*!s1*!s3 + s0*!s2*!s3 + s1*!s0*!s3
    $p3: OR4(
      AND3($s0, NOT($s1), NOT($s2)),
      AND3($s0, NOT($s1), NOT($s3)),
      AND3($s0, NOT($s2), NOT($s3)),
      AND3($s1, NOT($s0), NOT($s3))
    );

    //   !s3 * !s2 *  s1 * !s0
    // + !s3 * !s2 *  s1 *  s0
    // + !s3 *  s2 *  s1 * !s0
    // + !s3 *  s2 *  s1 *  s0
    // +  s3 * !s2 * !s1 * !s0
    // = s1*!s3 + s3*!s2*!s1*!s0
    $p4: OR(AND($s1, NOT($s3)), AND4($s3, NOT($s2), NOT($s1), NOT($s0)));

    //   !s3 * !s2 * !s1 *  s0
    // + !s3 * !s2 *  s1 *  s0
    // + !s3 *  s2 * !s1 * !s0
    // +  s3 * !s2 * !s1 * !s0
    // +  s3 * !s2 * !s1 *  s0
    // = s0*!s2*!s3 + s3*!s1*!s2 + s2*!s0*!s1*!s3
    $p5: OR3(
      AND3($s0, NOT($s2), NOT($s3)),
      AND3($s3, NOT($s1), NOT($s2)),
      AND4($s2, NOT($s0), NOT($s1), NOT($s3))
    );

    //   !s3 * !s2 * !s1 *  s0
    // + !s3 * !s2 *  s1 * !s0
    // + !s3 *  s2 * !s1 * !s0
    // + !s3 *  s2 * !s1 *  s0
    // + !s3 * !s2 * !s1 *  s0
    // = s0*s2*!s3 + s0*!s1*!s3 + s2*!s1*!s3 + s1*!s0*!s2*!s3
    $p6: OR4(
      AND3($s0, $s2, NOT($s3)),
      AND3($s0, NOT($s1), NOT($s3)),
      AND3($s2, NOT($s1), NOT($s3)),
      AND4($s1, NOT($s0), NOT($s2), NOT($s3))
    );

    --p1: #{$p1};
    --p2: #{$p2};
    --p3: #{$p3};
    --p4: #{$p4};
    --p5: #{$p5};
    --p6: #{$p6};

    // process d01, ..., d6
    @for $i from 1 through 6 {
      .datachar:nth-child(#{$i}) {
        $t: "--d#{zpad($i)}";

        // to binary
        @for $j from 0 through 3 {
          @if $j == 0 {
            --tmp#{$j}: var(#{$t});
          } @else {
            --tmp#{$j}: calc((var(--tmp#{$j - 1}) - var(--t#{$j - 1})) / 2);
          }
          --t#{$j}: mod(var(--tmp#{$j}), 2);
        }

        $t0: var(--t0);
        $t1: var(--t1);
        $t2: var(--t2);
        $t3: var(--t3);

        $p: var(--p#{$i});

        // encode $t to data character
        // =======================
        // $t | $p == 0 | $p == 1
        // -----------------------
        //  0 | 0001101 | 0100111
        //  1 | 0011001 | 0110011
        //  2 | 0010011 | 0011011
        //  3 | 0111101 | 0100001
        //  4 | 0100011 | 0011101
        //  5 | 0110001 | 0111001
        //  6 | 0101111 | 0000101
        //  7 | 0111011 | 0010001
        //  8 | 0110111 | 0001001
        //  9 | 0001011 | 0010111
        // =======================

        // G_i(t) = ¬ L_(8−i)(t)   (i = 1...7)
        // r_i(t,p) = (!p) * L_i(t) + p * ¬L_(8−i)(t)   (1 <= i <= 7)

        $L1: 0;
        $L2: OR3($t2, AND($t0, $t1), AND($t3, NOT($t0)));
        $L3: OR3(AND($t0, NOT($t3)), AND($t1, NOT($t2)), AND($t3, NOT($t0)));
        $L4: OR3(
          AND($t1, $t2),
          AND($t0, NOT($t2)),
          AND3(NOT($t1), NOT($t2), NOT($t3))
        );
        $L5: OR3(
          AND3($t0, $t1, NOT($t2)),
          AND3($t1, $t2, NOT($t0)),
          AND3(NOT($t0), NOT($t1), NOT($t2))
        );
        $L6: OR4($t3, AND($t1, $t2), AND($t1, NOT($t0)), AND($t2, NOT($t0)));
        $L7: 1;

        $r1: mux($L1, NOT($L7), $p);
        $r2: mux($L2, NOT($L6), $p);
        $r3: mux($L3, NOT($L5), $p);
        $r4: mux($L4, NOT($L4), $p);
        $r5: mux($L5, NOT($L3), $p);
        $r6: mux($L6, NOT($L2), $p);
        $r7: mux($L7, NOT($L1), $p);

        --r1: #{$r1};
        --r2: #{$r2};
        --r3: #{$r3};
        --r4: #{$r4};
        --r5: #{$r5};
        --r6: #{$r6};
        --r7: #{$r7};

        @for $k from 1 through 7 {
          .bar:nth-child(#{$k}) {
            background: bar(var(--r#{$k}));
          }
        }
      }
    }
  }

  .right-databar {
    // process d07, ..., d11 and d12 (check-digit)
    @for $i from 0 through 5 {
      .datachar:nth-child(#{$i + 1}) {
        $t: "--d#{zpad(7 + $i)}";

        // to binary
        @for $j from 0 through 3 {
          @if $j == 0 {
            --tmp#{$j}: var(#{$t});
          } @else {
            --tmp#{$j}: calc((var(--tmp#{$j - 1}) - var(--t#{$j - 1})) / 2);
          }
          --t#{$j}: mod(var(--tmp#{$j}), 2);
        }

        $t0: var(--t0);
        $t1: var(--t1);
        $t2: var(--t2);
        $t3: var(--t3);

        // encode $t to data character
        // 0: 1110010
        // 1: 1100110
        // 2: 1101100
        // 3: 1000010
        // 4: 1011100
        // 5: 1001110
        // 6: 1010000
        // 7: 1000100
        // 8: 1001000
        // 9: 1110100

        // always 1
        .bar:nth-child(1) {
          background: bar(1);
        }

        //   !t0 * !t1 * !t2 * !t3
        // +  t0 * !t1 * !t2 * !t3
        // + !t0 *  t1 * !t2 * !t3
        // +  t0 * !t1 * !t2 *  t3
        // = t0*!t1*!t2 + !t0*!t2*!t3
        .bar:nth-child(2) {
          background: bar(
            OR(
              AND3($t0, NOT($t1), NOT($t2)),
              AND3(NOT($t0), NOT($t2), NOT($t3))
            )
          );
        }

        //   !t0 * !t1 * !t2 * !t3
        // + !t0 * !t1 *  t2 * !t3
        // + !t0 *  t1 *  t2 * !t3
        // +  t0 * !t1 * !t2 *  t3
        // = !t3*!t2*!t1*!t0 + !t3*t2*!t0 + t3*!t2*!t1*t0
        .bar:nth-child(3) {
          background: bar(
            OR3(
              AND4(NOT($t3), NOT($t2), NOT($t1), NOT($t0)),
              AND3(NOT($t3), $t2, NOT($t0)),
              AND4($t3, NOT($t2), NOT($t1), $t0)
            )
          );
        }

        //   !t0 *  t1 * !t2 *!t3
        // + !t0 * !t1 *  t2 *!t3
        // +  t0 * !t1 *  t2 *!t3
        // + !t0 * !t1 * !t2 * t3
        // = !t3*!t2*t1*!t0 + !t3*t2*!t1 + t3*!t2*!t1*!t0
        .bar:nth-child(4) {
          background: bar(
            OR3(
              AND4(NOT($t3), NOT($t2), $t1, NOT($t0)),
              AND3(NOT($t3), $t2, NOT($t1)),
              AND4($t3, NOT($t2), NOT($t1), NOT($t0))
            )
          );
        }

        //    t0 * !t1 * !t2 * !t3
        // + !t0 *  t1 * !t2 * !t3
        // + !t0 * !t1 *  t2 * !t3
        // +  t0 * !t1 *  t2 * !t3
        // +  t0 *  t1 *  t2 * !t3
        // +  t0 * !t1 * !t2 *  t3
        // = t0*t2*!t3 + t0*!t1*!t2 + t2*!t1*!t3 + t1*!t0*!t2*!t3
        .bar:nth-child(5) {
          background: bar(
            OR4(
              AND3($t0, $t2, NOT($t3)),
              AND3($t0, NOT($t1), NOT($t2)),
              AND3(NOT($t1), $t2, NOT($t3)),
              AND4($t1, NOT($t0), NOT($t2), NOT($t3))
            )
          );
        }

        //   !t0 * !t1 * !t2 * !t3
        // +  t0 * !t1 * !t2 * !t3
        // +  t0 *  t1 * !t2 * !t3
        // +  t0 * !t1 *  t2 * !t3
        // = t0*!t1*!t3 + t0*!t2*!t3 + !t1*!t2*!t3
        .bar:nth-child(6) {
          background: bar(
            OR3(
              AND3($t0, NOT($t1), NOT($t3)),
              AND3($t0, NOT($t2), NOT($t3)),
              AND3(NOT($t1), NOT($t2), NOT($t3))
            )
          );
        }

        // always 0
        .bar:nth-child(7) {
          background: bar(0);
        }
      }
    }
  }

  position: relative;
  .digits {
    .digit {
      font-size: calc(12 * var(--bar-width));
      line-height: 1cap;
      font-family: monospace;

      position: absolute;
      bottom: calc(var(--guardbar-height) - var(--bar-height) - 1.2cap);
    }
    @for $digit from 0 through 12 {
      .digit:nth-child(#{$digit + 1})::after {
        counter-reset: val var(--d#{zpad($digit)});
        content: counter(val);
      }
    }
    .digit:nth-child(1) {
      left: calc(2 * var(--bar-width));
    }
    @for $i from 0 through 5 {
      .digit:nth-child(#{2 + $i}) {
        left: calc(#{15 + $i * 7} * var(--bar-width));
      }
    }
    @for $i from 0 through 5 {
      .digit:nth-child(#{8 + $i}) {
        left: calc(#{61 + $i * 7} * var(--bar-width));
      }
    }
  }
}

// input
@for $digit from 0 through 11 {
  $cls: "digit#{zpad($digit)}";

  @for $val from 0 through 9 {
    :root:has(.#{$cls} input[value="#{$val}"]:checked) {
      --d#{zpad($digit)}: #{$val};
    }
  }
}

// calculate check-digit
:root {
  --sum-even: calc(
    var(--d00) + var(--d02) + var(--d04) + var(--d06) + var(--d08) + var(--d10)
  );
  --sum-odd: calc(
    var(--d01) + var(--d03) + var(--d05) + var(--d07) + var(--d09) + var(--d11)
  );
  --check-digit: mod(
    calc(10 - mod(calc(var(--sum-odd) * 3 + var(--sum-even)), 10)),
    10
  );
  --d12: var(--check-digit);
}
